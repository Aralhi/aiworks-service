# This workflow will build and push a node.js application to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-nodejs?tabs=linux&pivots=development-environment-cli
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Change the value for the AZURE_WEBAPP_NAME. Optionally, change the AZURE_WEBAPP_PACKAGE_PATH and NODE_VERSION environment variables below.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

on:
  push:
    branches: ['main']
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: your-app-name # set this to your application's name
  AZURE_WEBAPP_PACKAGE_PATH: '.' # set this to the path to your web app project, defaults to the repository root
  NODE_VERSION: '18.x' # set this to the node version to use
  REMOTE_WORKSPACE: ./aiworks-service

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # - name: Set up Node.js
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: ${{ env.NODE_VERSION }}
      #     cache: 'npm'

      # - name: npm install, build, and test
      #   run: |
      #     npm install
      #     npm run build --if-present
      #     npm run test --if-present
      - name: SSH deploy
        # You may pin to the exact commit or the version.
        # uses: easingthemes/ssh-deploy@3884c8554ff45c0fd37d3f12a76288d06ce7a2ff
        uses: easingthemes/ssh-deploy@v4.1.8
        with:
          # Private key part of an SSH key pair
          SSH_PRIVATE_KEY: ${{ secrets.TENCENT_ESC_SSH_KEY }}
          # Remote host
          REMOTE_HOST: ${{ secrets.TENCENT_ECS_HOST }}
          # Remote user
          REMOTE_USER: deploy
          # Remote port
          # REMOTE_PORT: # optional, default is 22
          # Source directory, path relative to `$GITHUB_WORKSPACE` root, eg: `dist/`
          SOURCE: .
          # Target directory
          TARGET: ${{ env.REMOTE_WORKSPACE }}
          # Arguments to pass to rsync
          # ARGS: # optional, default is -rlgoDzvc -i
          # An array of ssh arguments, they must be prefixed with -o and separated by a comma, for example: -o SomeArgument=no, -o SomeOtherArgument=5
          # SSH_CMD_ARGS: # optional, default is -o StrictHostKeyChecking=no
          # paths to exclude separated by `,`, ie: `/dist/, /node_modules/`
          EXCLUDE: /.git/,/node_modules/
          # Script to run on host machine before rsync
          # SCRIPT_BEFORE: # optional, default is
          # Script to run on host machine after rsync
          SCRIPT_AFTER: cd ${{ env.REMOTE_WORKSPACE }} && npm install && npm run build --if-present && pm2 restart aiworks
